% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sc_helperfunctions.R
\name{theme_dimplot}
\alias{theme_dimplot}
\title{#' Plot marker heatmap with labelled genes
#'
#' Plot a heatmap where both cell clusters (columns) AND genes (rows) are labelled. The row labels are taken from the output of \code{Seurat::FindAllMarkers()}.
#'
#' @param sobj seurat object
#' @param markers data.frame in formal of \code{Seurat::FindAllMarkers()}
#' @param grouping.var column name in \code{sobj@meta.data} that contains cell grouping info such as cluster or celltype; it should match the cluster. default is 'seurat_clusters'
#' @param assay
#' @param slot
#' @param numgenes
#' @param maxval
#' @param minval
#' @param cellgroup_color_palette
#' @param genegroup_color_palette
#' @param show_heatmap_legend
#' @param show_cellgroup_legend
#' @param show_genegroup_legend
#' @param heatmaptitle
#' @param legendname
#' @param row_names_gp
#' @param row_title_gp
#' @param row_gap
#' @param column_gap
#' @param row_title_rot
#' @param column_title_rot
#' @param column_title_gp
#' @param cluster_columns
#' @param cluster_rows
#' @param use_raster
#' @param ...
#'
#' @return
#' @export
#'
#' @examples
markerheatmap <- function(sobj,
markers,
grouping.var,
assay,
slot,
numgenes,
maxval,
minval,
cellgroup_color_palette,
genegroup_color_palette,
show_heatmap_legend,
show_cellgroup_legend,
show_genegroup_legend,
# heatmaptitle,
legendname,
row_names_gp,
row_title_gp,
row_gap,
column_gap,
row_title_rot,
column_title_rot,
column_title_gp,
cluster_columns,
cluster_rows,
use_raster,
...}
\usage{
theme_dimplot(titlesize = 15)
}
\arguments{
\item{titlesize}{numeric, size of font}
}
\description{

}
\details{
if(missing(sobj)){stop('Provide Seurat object')}
if(missing(markers)){stop("Provide markers in format of Seurat::FindAllMarkers() output")}
if(missing(grouping.var)){grouping.var <- 'seurat_clusters'}
if(missing(assay)){assay <- DefaultAssay(sobj)}
if(missing(slot)){slot <- 'scale.data'}
if(missing(numgenes)){numgenes <- 5}

if(missing(maxval)){maxval <- 5}
if(missing(minval)){minval <- -5}

if(missing(show_heatmap_legend)){show_heatmap_legend = T}
if(missing(show_cellgroup_legend)){show_cellgroup_legend = T}
if(missing(show_genegroup_legend)){show_genegroup_legend = F}
}
\section{if(missing(heatmaptitle)){heatmaptitle = ''}}{
if(missing(legendname)){
if(slot == 'scale.data'){legendname = 'Scaled\nExpression'}
if(slot == 'data'){legendname = 'Normalized\nExpression'}
if(slot == 'counta'){legendname = 'Expression'}
}

if(missing(row_names_gp)) {row_names_gp = grid::gpar(fontsize = 5)}
if(missing(row_title_gp)) {row_title_gp = grid::gpar(fontsize = 5)}
if(missing(row_gap)){ row_gap = unit(0.8, "mm")}
if(missing(column_gap)){column_gap = unit(0.8, "mm")}
if(missing(row_title_rot)){row_title_rot = 0}
if(missing(column_title_rot)){column_title_rot = 45}
if(missing(column_title_gp)){column_title_gp = grid::gpar(fontsize = 7)}
if(missing(cluster_columns)){cluster_columns = F}
if(missing(cluster_rows)){cluster_rows = F}
if(missing(use_raster)){use_raster = F}

if(assay == 'integrated'){warning('Using assay "integrated" may cause issues')}

#set defualt assay as the one given
DefaultAssay(sobj) <- assay

require(magrittr)
require(dplyr)
require(ComplexHeatmap)

#get top genes
n <- numgenes
top <- markers \%>\% group_by(cluster) \%>\% top_n(n = n, wt = avg_log2FC)
genes <- top$gene

#heatmap of cluster markers

#make sure all genes are in if using scale.data
if(slot == 'scale.data'){

\if{html}{\out{<div class="sourceCode">}}\preformatted{#if using SCT, use "getresidual" to add the gnenes to scale.data
if(assay == 'SCT')\{

  if( any( !(genes \%in\% rownames(sobj@assays$SCT@scale.data)) ) )\{

    #get missing genes
    missinggenes <- genes[!(genes \%in\% rownames(sobj@assays$SCT@scale.data))]

    warning('The following genes are missing from assay SCT slot scale.data, will try to recover using GetResidual() function:',
            '\\n',
            paste(missinggenes,collapse = ', ') )

    #try getresidual...
    sobj <- GetResidual(sobj, missinggenes, na.rm = F, replace.value = T)

    #it can be complicated doing this after integration, some genes are NAs...
    scgem <- sobj@assays$SCT@scale.data

    if( any( !complete.cases(scgem) ) )\{
      scgem <- scgem[complete.cases(scgem),]
      top <- top[top$gene \%in\% rownames(scgem),]
      sobj@assays$SCT@scale.data <- scgem
    \}
    rm(scgem)

  \}

\}

if(assay == 'RNA')\{

  if( any( !(genes \%in\% rownames(sobj@assays$RNA@scale.data)) ) )\{

    #try get missing genes
    missinggenes <- genes[!(genes \%in\% rownames(sobj@assays$RNA@scale.data))]

    warning('The following genes are missing from assay RNA slot scale.data, will try to recover using ScaleData() function:',
            '\\n',
            paste(missinggenes,collapse = ', ') )

    # try to recover
    sobj <- ScaleData(sobj, features = missinggenes)

    #it can be complicated doing this after integration, some genes are NAs...
    scgem <- sobj@assays$RNA@scale.data

    if( any( !complete.cases(scgem) ) )\{
      scgem <- scgem[complete.cases(scgem),]
      top <- top[top$gene \%in\% rownames(scgem),]
      sobj@assays$RNA@scale.data <- scgem
    \}
    rm(scgem)

  \}

\}
}\if{html}{\out{</div>}}

}

#prep markers
top <- top\link{top$gene \%in\% rownames(sobj),}
}

\section{get gem}{
gem <- GetAssayData(sobj, assay = assay, slot = slot)

#subset gem for just the markers
gem <- gem\link{match(top$gene, rownames(gem)),}

#annot for clusters
#set up grouping var tmp column in md
md <- sobj@meta.data
md$AF_groupingvar <- md\link{,grouping.var}

#factorize if not, using order from marker data
if(!is.factor(md$AF_groupingvar)){
md$AF_groupingvar <- factor(md$AF_groupingvar, levels = unique(markers$cluster) )
}

#order md by grouping var
md <- md\link{order(md$AF_groupingvar),}

#order gem using ordered md
gem <- gem\link{,match(rownames(md), colnames(gem))}
\subsection{heatmap column and row annotatons for cells and genes}{
}

\subsection{column annots}{

#get named vector: values are grouping,s names are barcodes
clust_bc <- setNames(md$AF_groupingvar,
nm = rownames(md)
)

#set up column color
if(missing(cellgroup_color_palette)){
COLORPAL <- scales::hue_pal()(length(levels(md$AF_groupingvar)))
} else{
COLORPAL <- cellgroup_color_palette
}

col_clust <- setNames(COLORPAL,
nm = levels(md$AF_groupingvar))

#set up column cluster color

ha_clust <- ComplexHeatmap::HeatmapAnnotation(Group = clust_bc, col = list(Group = col_clust),
name = grouping.var,
show_legend = show_cellgroup_legend)

##annot for rows (markers)

#facotrize if not
if(!is.factor(top$cluster)){
top$cluster <- factor(top$cluster, levels=unique(top$cluster))
}

#make sure gene order matches features
gem <- gem\link{match(top$gene, rownames(gem)),}

#set up named vector: calues are clusters, names are genes
ct_gene <- setNames(top$cluster,
nm=top$gene)

#set up row colors;
}
}

\section{if not provided, we use same as column colors,}{

}

\section{but make sure to remove missing cluster marker colors if cluster had no markers}{

}

\examples{
Seurat::DimPlot(object = seurat_object) + theme_dimplot()
}
